from pyspark import SparkConf, SparkContext
from pyspark.streaming import StreamingContext
from pyspark.streaming.kafka import KafkaUtils
import operator
import numpy as np
import matplotlib.pyplot as plt


def main():
    conf = SparkConf().setMaster("local[2]").setAppName("Streamer")
    sc = SparkContext(conf=conf)
    ssc = StreamingContext(sc, 10)   # Create a streaming context with batch interval of 10 sec
    ssc.checkpoint("checkpoint")

    pwords = load_wordlist("positive.txt")
    nwords = load_wordlist("negative.txt")
   
    counts = stream(ssc, pwords, nwords, 100)
    make_plot(counts)


def make_plot(counts):
    """
    Plot the counts for the positive and negative words for each timestep.
    Use plt.show() so that the plot will popup.
    """
    # YOUR CODE HERE
    positivelist=[]
    negativelist=[]
    xaxis=[]
    count=0
    for lists in counts:
        count=count+1
        xaxis.append([count])
        positivelist.append(lists[0][1])
    for lists in counts:
        negativelist.append(lists[1][1])
    plt.plot(xaxis,positivelist,label='positive',marker='o')
    plt.plot(xaxis,negativelist,label='negative',marker='o')
    plt.xlabel('Time step')
    plt.ylabel('Word count')
    plt.legend()
    plt.show()



def load_wordlist(filename):
    f=open(filename,'r')
    words=f.read().splitlines()    
    return words

    """ 
    This function should return a list or set of words from the given filename.
    """
    # YOUR CODE HERE




def stream(ssc, pwords, nwords, duration):
    kstream = KafkaUtils.createDirectStream(
        ssc, topics = ['twitterstream'], kafkaParams = {"metadata.broker.list": 'localhost:9092'})
    tweets = kstream.map(lambda x: x[1].encode("ascii","ignore"))

    # Each element of tweets will be the text of a tweet.
    # You need to find the count of all the positive and negative words in these tweets.
    # Keep track of a running total counts and print this at every time step (use the pprint function).
    # YOUR CODE HERE
    #tweets.pprint()
    pdict={}
    for word in pwords:
        pdict[word]=True
    ndict={}
    for word in nwords:
        ndict[word]=True

    words=tweets.flatMap(lambda x: x.split(" "))
    filteredWords=words.filter(lambda x: x in pdict or x in ndict)
    pairs=filteredWords.map(lambda x:("positive",1) if x in pdict else ("negative",1))
    totalcount=pairs.reduceByKey(lambda x,y:x+y)
    #totalcount.pprint()         

    

    def updatefunc(newValues,runningCount):
        if runningCount is None:
            runningCount=0
        return sum(newValues,runningCount)
        

    runningCounts=pairs.updateStateByKey(updatefunc)
    runningCounts.pprint()

    # Let the counts variable hold the word counts for all time steps
    # You will need to use the foreachRDD function.
    # For our implementation, counts looked like:
    #   [[("positive", 100), ("negative", 50)], [("positive", 80), ("negative", 60)], ...]
    counts = []
    totalcount.foreachRDD(lambda t,rdd: counts.append(rdd.collect()))
    
    
    ssc.start()                         # Start the computation
    ssc.awaitTerminationOrTimeout(duration)
    ssc.stop(stopGraceFully=True)

    return counts


if __name__=="__main__":
    main()
